name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.3'

      - name: Run unit tests
        run: go test ./...

      - name: Determine next version
        id: version
        shell: bash
        run: |
          set -euo pipefail
          git fetch --tags --force

          current_tag=$(git tag --points-at HEAD --list 'v[0-9]*.[0-9]*.[0-9]*' | head -n1 || true)
          if [[ -n "${current_tag}" ]]; then
            echo "tag=${current_tag}" >> "$GITHUB_OUTPUT"
            echo "create=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          latest_tag=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n1 || true)
          if [[ -z "${latest_tag}" ]]; then
            next_tag="v0.0.0"
          else
            version="${latest_tag#v}"
            IFS='.' read -r major minor patch <<< "${version}"
            next_tag="v${major}.${minor}.$((patch + 1))"
          fi

          echo "tag=${next_tag}" >> "$GITHUB_OUTPUT"
          echo "create=true" >> "$GITHUB_OUTPUT"

      - name: Configure Git author
        if: steps.version.outputs.create == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create annotated tag
        if: steps.version.outputs.create == 'true'
        env:
          TAG: ${{ steps.version.outputs.tag }}
        run: git tag -a "$TAG" -m "Release $TAG"

      - name: Push tag
        if: steps.version.outputs.create == 'true'
        env:
          TAG: ${{ steps.version.outputs.tag }}
        run: git push origin "$TAG"

      - name: Generate changelog
        if: steps.version.outputs.create == 'true'
        env:
          TAG: ${{ steps.version.outputs.tag }}
        run: ./scripts/generate-changelog.sh "$TAG"

      - name: Run GoReleaser
        if: steps.version.outputs.create == 'true'
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: ~> v1
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_CURRENT_TAG: ${{ steps.version.outputs.tag }}

      - name: Trigger Debian Mirror Update
        if: steps.version.outputs.create == 'true'
        uses: peter-evans/repository-dispatch@v3
        with:
          event-type: update-debian-mirror
          token: ${{ secrets.GITHUB_TOKEN }}
